{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Fundamentos de Programa\u00e7\u00e3o","text":""},{"location":"#fundamentos-de-programacao","title":"Fundamentos de Programa\u00e7\u00e3o","text":"<p>Ol\u00e1. Seja bem-vindo. Eu sou o Tio Dani, e este \u00e9 o curso Fundamentos de Programa\u00e7\u00e3o, onde eu pretendo trazer assuntos essenciais para a \u00e1rea de programa\u00e7\u00e3o, na mesma ideia do curso Coisas Que N\u00e3o Ensinam em TI.</p>"},{"location":"#apresentacao-do-curso","title":"Apresenta\u00e7\u00e3o do Curso","text":"<p>Este conte\u00fado \u00e9 recomendado para quem pretende iniciar na \u00e1rea de programa\u00e7\u00e3o, e tem pouco ou nenhum conhecimento na \u00e1rea. O tio vai falar de assuntos como:  - Pseudo-c\u00f3digo - Teste de Mesa - Algoritmos - Estruturas de Dados - An\u00e1lise de Algoritmos</p>"},{"location":"#requisitos","title":"Requisitos","text":"<ul> <li>N\u00e3o \u00e9 necess\u00e1rio saber absolutamente nada de programa\u00e7\u00e3o para fazer este curso</li> <li>\u00c9 bacana voc\u00ea ter acesso a um computador para, eventualmente, testar algumas das coisas que iremos apresentar aqui. Mas n\u00e3o \u00e9 um requisito.</li> <li>Tamb\u00e9m n\u00e3o \u00e9 um requisito, mas voc\u00ea pode achar interessante acompanhar, tamb\u00e9m, o conte\u00fado do curso Coisas Que N\u00e3o Ensinam em TI</li> </ul>"},{"location":"#o-que-este-curso-nao-e","title":"O que este curso n\u00e3o \u00e9","text":"<p>Apesar de ser um curso com fundamentos de programa\u00e7\u00e3o, este curso n\u00e3o tem a proposta de ensinar uma linguagem de programa\u00e7\u00e3o. Pode ser que, para exemplos concretos, apresentemos c\u00f3digo em Python, ou possa at\u00e9 propor exerc\u00edcios usando a linguagem, mas n\u00e3o h\u00e1 a pretens\u00e3o de ensin\u00e1-la para al\u00e9m do uso necess\u00e1rio para os prop\u00f3sitos deste curso.</p> <p>Existem cursos de programa\u00e7\u00e3o dispon\u00edveis na internet, e o tio pode tentar encontrar alguns para recomendar.</p> <p>Se, mesmo assim, voc\u00ea quiser que o tio crie um curso para uma linguagem de programa\u00e7\u00e3o, entre no Discord e vamos conversar. Dependendo de como for e de quantas pessoas tenham interesse, pode ser que eu me empolgue com a ideia e comece algo.</p>"},{"location":"aulas/01-o-que-e-um-programa/","title":"\ud83d\udea7 Aula 01 - O que \u00e9 um Programa?","text":"<p>N\u00f3s estamos prestes a estudar a ideia de um processo computacional. Processos computacionais s\u00e3o seres abstratos que habitam computadores. \u00c0 medida que se desenvolvem, processos manipulam outras coisas abstratas chamadas dados. A realiza\u00e7\u00e3o de um processo \u00e9 dirigida por um padr\u00e3o de regras chamado de programa. Pessoas criam programas para dirigir processos. Na pr\u00e1tica, n\u00f3s (programadores e programadoras) invocamos os esp\u00edritos do computador com nossos feiti\u00e7os. - Structure and Interpretation of Computer Programs - Harold Abelson and Gerald Jay Sussman with Julie Sussman</p> <p>Eu amo a forma como os autores do livro Estrutura e Interpreta\u00e7\u00e3o de Programas Computacionais descrevem processos como esp\u00edritos, nos comparando a magos e magas que criam feiti\u00e7os que conjuram estes esp\u00edritos para realizar tarefas.</p> <p>Este \u00e9 um bom ponto de partida. Se voc\u00ea alguma vez j\u00e1 tiver jogado RPG (como Dungeons and Dragons), voc\u00ea consegue de alguma forma se identificar com isto: A personagem \u00e9 uma maga que aprende novos spells (feiti\u00e7os) que manipulam a trama pra que ela fa\u00e7a algo sobrenatural acontecer em seu favor.</p> <p>Programas s\u00e3o como estes feiti\u00e7os. Eles manipulam processos computacionais, para que eles fa\u00e7am algo acontecer.</p> <p>Pelo menos, \u00e9 melhor do que uma defini\u00e7\u00e3o formal:</p> <p>Um programa \u00e9 um conjunto de instru\u00e7\u00f5es que um processo computacional segue para executar uma ou mais tarefas.</p> <p>Processos computacionais s\u00e3o um conceito ligado \u00e0 arquitetura de Sistemas Operacionais. Um Sistema Operacional \u00e9 um tipo muito espec\u00edfico de programa (ou conjunto de programas) respons\u00e1vel por gerenciar os recursos de um computador: Mem\u00f3ria, Disco, Processador, Placa de v\u00eddeo, comunica\u00e7\u00e3o com a rede, etc.</p> <p>Os mais conhecidos sistemas operacionais s\u00e3o o Windows e o Linux, no mundo dos computadores, e Android e iOS no mundo dos dispositivos m\u00f3veis (celulares smartphones, tablets, etc). Mas existem muitos outros.</p> <p>Dentre as coisas que os sistemas operacionais gerenciam, se encontram a ideia de Processos Computacionais. Sempre que um programa qualquer precisa ser executado, o que o Sistema Operacional faz \u00e9 criar um novo processo e atribuir a ele a tarefa de executar as instru\u00e7\u00f5es contidas neste programa, intermediando junto ao Sistema Operacional para alocar recursos (mem\u00f3ria, processamento, disco, rede, etc). Quando todas as instru\u00e7\u00f5es foram devidamente executadas, ou alguma situa\u00e7\u00e3o inesperada de falha acontece, levando-o ao estado de erro, a execu\u00e7\u00e3o do programa \u00e9 encerrada e o processo deixa de existir.</p> <p>O sistema operacional faz isso o tempo todo. Se voc\u00ea usa Windows, voc\u00ea pode ser capaz de ver uma lista dos processos em execu\u00e7\u00e3o pressionando junto as teclas Ctrl+Shift+Escape. Na aba Processos voc\u00ea consegue ter uma ideia, mesmo que voc\u00ea n\u00e3o esteja fazendo nada al\u00e9m de assistir um v\u00eddeo, voc\u00ea certamente ir\u00e1 notar que a lista de processos em execu\u00e7\u00e3o \u00e9 extensa, e que o seu computador est\u00e1 mais ocupado do que voc\u00ea poderia imaginar. E cada um destes processos est\u00e1 executando um programa.</p> <p>O motivo de haver tantos processos, mesmo que voc\u00ea esteja executando poucos programas, ilustra a grande variedade de tipos de programas que podem ser executados por um computador.</p> <p>Aplica\u00e7\u00f5es simples como uma calculadora, um editor de textos, ou um tocador de m\u00fasicas, ou mais complexas como um aplicativo de mensagens, um navegador da web, uma planilha de c\u00e1lculos ou um jogo eletr\u00f4nico, s\u00e3o os tipos mais comuns de programas que n\u00f3s usamos no dia-a-dia.</p> <p>Mas, ao trabalhar com programa\u00e7\u00e3o, voc\u00ea ir\u00e1 encontrar tipos bem mais espec\u00edficos de programas, como sistemas, que gerenciam recursos complexos e estabelecem uma interface para interagir com eles, e utilit\u00e1rios, que s\u00e3o ferramentas espec\u00edficas para lidar com o uso destes recursos, como gerenciadores de arquivos, formatadores de discos, anti-v\u00edrus e gerenciadores de senhas e criptografia, etc.</p> <p>Alguns destes programas s\u00e3o executados a partir da pr\u00f3pria interven\u00e7\u00e3o do usu\u00e1rio, como quando voc\u00ea abre o seu navegador para usar suas redes sociais, ou um app no celular para enviar uma mensagem. Outros programas rodam silenciosamente na mem\u00f3ria, para disponibilizar servi\u00e7os que s\u00e3o utilizados por outros meios, como Bluetooth, por exemplo.</p> <p>E ainda existem programas com os quais voc\u00ea interage que sequer est\u00e3o sendo executados no computador ou dispositivo m\u00f3vel que voc\u00ea est\u00e1 usando. Como quando voc\u00ea acessa a internet. O navegador, ou o aplicativo de rede social que voc\u00ea usa, ambos est\u00e3o sendo executados em processos no seu dispositivo, mas est\u00e3o interagindo com programas remotos, que est\u00e3o sendo executados em computadores ao redor do mundo, que fornecem as informa\u00e7\u00f5es para que estes programas funcionem da forma como voc\u00ea espera.</p> <p>Criar programas n\u00e3o \u00e9 uma tarefa trivial. N\u00e3o \u00e9 como simplesmente dizer ao computador \"Fa\u00e7a isso, fa\u00e7a aquilo\". H\u00e1 uma imaterialidade envolvida no processo que torna a atividade de criar programas an\u00e1loga a algo sobrenatural. Conjurar esp\u00edritos que habitam os computadores para manipular dados usando feiti\u00e7os criados atrav\u00e9s de s\u00edmbolos arcanos chamados linguagens de programa\u00e7\u00e3o, \u00e9 a forma mais bacana de descrever o que fazem as pessoas que criam programas.</p> <p>De certa forma, voc\u00ea est\u00e1 embarcando na jornada de um \"aprendiz de feitceiro\", e vai aprender a conjurar estes processos e faz\u00ea-los realizar tarefas, obter dados e manipul\u00e1-los, afetando o mundo em que vivemos.</p> <p>Um processo computacional, em um computador que funciona corretamente, executa programas de forma precisa e acurada. Por isto, como aprendizes de feiticeiro, pessoas novatas em programa\u00e7\u00e3o precisam aprender a entender e antecipar as consequ\u00eancias de sua conjura\u00e7\u00e3o. Mesmo pequenos erros (normalmente chamados de bugs ou glitches) podem ter consequ\u00eancias complexas e impreviz\u00edveis.</p> <p>\u00c9 isto que voc\u00ea vai aprender neste curso: criar programas, entender e antecipar como eles deveriam se comportar, identificar e corrigir erros, e garantir que eles realizar\u00e3o tarefas complexas.</p>"},{"location":"aulas/01-o-que-e-um-programa/#referencias","title":"Refer\u00eancias","text":""},{"location":"aulas/01-o-que-e-um-programa/#-building-abstraction-with-procedures","title":"- Building Abstraction with Procedures","text":""},{"location":"aulas/02-arquitetura-de-von-neumann/","title":"\ud83d\udea7 Aula 02 - Arquitetura de Von Neumann","text":"<p>Responder como um programa funciona \u00e9 uma quest\u00e3o que demanda certo n\u00edvel de abstra\u00e7\u00e3o. \u00c9 sempre poss\u00edvel se aprofundar em mais camadas de detalhe da resposta. E, quanto mais detalhes a gente tentar cobrir, mais e mais a gente se afasta do que realmente seja importante para os prop\u00f3sitos deste curso. Ainda assim, \u00e0 medida que voc\u00ea se especializar cada vez mais em programa\u00e7\u00e3o, mais relevante estes detalhes se tornar\u00e3o.</p> <p>Mas aqui a gente vai tentar n\u00e3o se aprofundar mais do que o suficiente para dar uma resposta concreta \u00e0 pergunta \"o que eles fazem?\", e tentar provocar em voc\u00ea alguma curiosidade para se aprofundar mais no futuro.</p>"},{"location":"aulas/02-arquitetura-de-von-neumann/#o-que-e-a-arquitetura-de-von-neumann","title":"O que \u00e9 a Arquitetura de Von Neumann","text":"<p>Em 1945, John von Newmann definiu os elementos prim\u00e1rios de um computador com prop\u00f3sito de c\u00e1lculos gen\u00e9ricos, e ele descreveu o sistema em cinco subdivis\u00f5es: Controle Central, Mem\u00f3ria Principal, Meio de Entrada, Meio de Sa\u00edda, e M\u00eddia de Grava\u00e7\u00e3o. O Controle Central (que hoje chamamos de CPU, ou Unidade Central de Processamento) seria, por sua vez, formada por cinco outros subsistemas: a Unidade de Controle, um Oscilador de Clock (que \u00e9 basicamente um sincronizador), a Unidade L\u00f3gica e Aritm\u00e9tica (ULA, ou ALU em ingl\u00eas), uma mem\u00f3ria interna para Registradores, e um cache para a mem\u00f3ria.</p> <p>Esta arquitetura se replica nos m\u00faltiplos n\u00facleos de um processador moderno, embora existam diferentes designs entre os fabricantes de processador, e eu n\u00e3o pretendo entrar em detalhes a respeito destas diferen\u00e7as neste curso, at\u00e9 por que eu n\u00e3o domino esta \u00e1rea.</p> <p>O importante aqui \u00e9 entender como a CPU funciona: - Processadores possuem um ciclo de trabalho, que se repete indefinidamente desde o momento em que ele \u00e9 ligado at\u00e9 o momento em que a energia \u00e9 cortada, o ciclo de trabalho do processador \u00e9:      - Fetch: buscar da mem\u00f3ria a pr\u00f3xima instru\u00e7\u00e3o a ser executada     - Decode: decodificar a instru\u00e7\u00e3o para entender o que precisa ser feito     - Execute: Executar a instru\u00e7\u00e3o     - Store: armazenar o resultado da instru\u00e7\u00e3o - Cada passo deste ciclo \u00e9 executado sempre que o oscilador de clock emite um pulso el\u00e9trico - O oscilador de clock funciona em uma frequ\u00eancia determinada pela capacidade do processador. Por exemplo, atualmente o recorde de performance em um processador \u00e9 de pouco mais de 9Ghz, o que significa que o oscilador emite mais de 9 bilh\u00f5es de pulsos el\u00e9tricos por segundo.</p> <p>Existem detalhes aqui espec\u00edficos do design de processadores modernos que incluem pipelining e execu\u00e7\u00e3o superescalar, que torna os processadores capazes de administrar mais de um ciclo de trabalho simultaneamente, tornando-os muito eficientes. Al\u00e9m \u00e9 claro de recursos como interrup\u00e7\u00f5es, polling e Acesso Direto \u00e0 Mem\u00f3ria para que o processador se organize enquanto executa opera\u00e7\u00f5es mais lentas do que a capacidade em que ele opera (como interagir com o disco ou com a rede).</p> <p>Se voc\u00ea est\u00e1 achando essa explica\u00e7\u00e3o abstrata demais, eu realmente te encorajo a estudar Arquitetura e Organiza\u00e7\u00e3o de Computadores.</p> <p>Vamos focar neste ciclo de trabalho do processador, por que \u00e9 a\u00ed onde reside a execu\u00e7\u00e3o do nosso programa. Quando iniciamos a execu\u00e7\u00e3o de um programa, o Sistema Operacional cria um processo (como descrevemos na aula anterior), alocando uma quantidade de mem\u00f3ria onde o programa ser\u00e1 carregado e os dados usados durante a sua execu\u00e7\u00e3o ser\u00e3o manipulados.</p> <p>Quando o processo \u00e9 criado, o sistema operacional inicializa o contador de programa para o endere\u00e7o da sua primeira instru\u00e7\u00e3o. \u00c9 a\u00ed que o ciclo de trabalho da CPU na arquitetura de von Neumann entra em a\u00e7\u00e3o. O processador realiza o fetch (busca da instru\u00e7\u00e3o), decodifica e executa a tarefa, e segue para a pr\u00f3xima instru\u00e7\u00e3o.</p> <p>Lembrar agora da defini\u00e7\u00e3o mais formal de programa que fizemos na aula anterior pode fazer mais sentido, ent\u00e3o eu vou repet\u00ed-la para refrescar nossa mem\u00f3ria:</p> <p>Um programa \u00e9 um conjunto de instru\u00e7\u00f5es que um processo computacional segue para executar uma ou mais tarefas.</p> <p>Ent\u00e3o o processador come\u00e7a da primeira instru\u00e7\u00e3o, executa o ciclo de trabalho fetch-&gt;decode-&gt;execute-&gt;store, vai para a pr\u00f3xima instru\u00e7\u00e3o, e repete este fluxo de novo e de novo at\u00e9 que chega ao t\u00e9rmino do programa, e o processo \u00e9 finalizado, deixando de existir.</p> <p>N\u00e3o \u00e9 nada t\u00e3o rom\u00e2ntico e l\u00fadico quanto a ideia de tratar os processos como seres que conjuramos com nossos feiti\u00e7os, mas agora voc\u00ea tem uma ideia mais concreta de como as coisas funcionam.</p> <p>Mas como s\u00e3o estas instru\u00e7\u00f5es o programa possui e que o processador precisa executar?</p> <p>Tudo o que uma instru\u00e7\u00e3o de um programa faz \u00e9 instruir o computador a ler dados em uma ou mais m\u00eddias de entrada (teclado, rede, um drive de armazenamento, microfone, etc), e os registra na mem\u00f3ria, executa alguma opera\u00e7\u00e3o nestes dados (como opera\u00e7\u00f5es aritm\u00e9ticas ou l\u00f3gicas) e escreve o resultado da opera\u00e7\u00e3o em uma ou mais m\u00eddias de sa\u00edda (disco, rede, v\u00eddeo, dispositivo de som, etc).</p> <p>E, embora tudo isto pare\u00e7a ser simplista, \u00e9 repetindo este ciclo in\u00fameras vezes (milh\u00f5es, ou at\u00e9 mesmo bilh\u00f5es por segundo) que torna poss\u00edvel ser feito tudo o que testemunhamos com a tecnologia (reprodu\u00e7\u00e3o de filmes em alta resolu\u00e7\u00e3o, intera\u00e7\u00f5es com jogos 3D, navegar pela internet e assistir a conte\u00fado sendo transmitido por streaming, enquanto se ouve m\u00fasica e se usa um software para pintura digital, por exemplo).</p> <p>\u00c9 claro que deixamos de lado aqui uma s\u00e9rie de detalhes sobre como os sistemas operacionais lidam com diversos programas simultaneamente, al\u00e9m da a\u00e7\u00e3o de outros componentes, como a unidade de processamento das placas de v\u00eddeo (GPUs) e outros coprocessadores, mas eu acho que para concluir a nossa ideia do que \u00e9 um programa e como ele funciona, eu diria que o nosso objetivo foi cumprido. E volto a dizer: se voc\u00ea ficou interessado em saber mais sobre isso tudo, procure aprender sobre Arquitetura e Organiza\u00e7\u00e3o de Computadores. Existem diversos livros sobre o assunto, al\u00e9m de ser uma disciplina cl\u00e1ssica em gradua\u00e7\u00f5es de Ci\u00eancia da Computa\u00e7\u00e3o.</p> <p>O que h\u00e1 de mais importante neste modelo arquitetural \u00e9, talvez, compreender o seguinte: \u00c9 muito comum ouvirmos dizer que a CPU \u00e9 o c\u00e9rebro do computador. Apesar disto, a CPU n\u00e3o \u00e9, nem de longe, uma entidade dotada de intelig\u00eancia pr\u00f3pria. Tudo o que ela faz \u00e9 exatamente o que ela \u00e9 instru\u00edda a fazer. Literalmente. Nem mais, e nem menos. E \u00e9 a habilidade da pessoa de entender isto, de compreender as peculiaridades deste princ\u00edpio, e de ser capaz de, atrav\u00e9s desta compreens\u00e3o, antecipar o comportamento do computador, junto com as particularidades da linguagem de programa\u00e7\u00e3o que est\u00e1 usando (e, inerentemente, da plataforma onde ela roda), que a torna uma programadora boa ou ruim.</p> <p>A partir de agora, n\u00f3s iremos dedicar nosso foco para discutir como os programas s\u00e3o constru\u00eddos.</p>"},{"location":"aulas/02-arquitetura-de-von-neumann/#referencias","title":"Refer\u00eancias","text":"<ul> <li>Arquitetura de Von Newmann</li> <li>Essential Computer Science</li> </ul>"}]}